--[[
	マスク画像化.anm / ver.1.2.1
	Copyright (c) 2022 CaffemochaY

	アルファ or RGBの各要素 をグレースケールに変換する

	- changelog
		- ver.1.1.0
			- オブジェクトの生成の方法を変更
		- ver.1.2.0
			- pixel処理のループを改良
		- ver.1.2.1
			- 文字コードの正規化
]]

--track0:mode,0,3,0,1
--check0:alpha依存,1

local bit, ffi = require("bit"), require("ffi")
local mmode, adep = math.floor(obj.track0), obj.check0
local data, w, h = obj.getpixeldata()
local cdata = ffi.cast("uint32_t*", data)

local function pixelprocess(p)
	local pci = bit.rshift(p, 24) -- a
	return bit.lshift(pci, 16) + bit.lshift(pci, 8) + pci + 0xff000000
end

if mmode == 1 then
	function pixelprocess(p)
		local pa, pci = bit.rshift(p, 24), bit.band(bit.rshift(p, 16), 255)
		if adep then pci = pci * pa / 255 end
		return bit.lshift(pci, 16) + bit.lshift(pci, 8) + pci + 0xff000000
	end
elseif mmode == 2 then
	function pixelprocess(p)
		local pa, pci = bit.rshift(p, 24), bit.band(bit.rshift(p, 8), 255)
		if adep then pci = pci * pa / 255 end
		return bit.lshift(pci, 16) + bit.lshift(pci, 8) + pci + 0xff000000
	end
elseif mmode == 3 then
	function pixelprocess(p)
		local pa, pci = bit.rshift(p, 24), bit.band(p, 255)
		if adep then pci = pci * pa / 255 end
		return bit.lshift(pci, 16) + bit.lshift(pci, 8) + pci + 0xff000000
	end
end

for i = 0, w * h - 1 do cdata[i] = pixelprocess(cdata[i]) end
obj.putpixeldata(data)
